#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  dontlognull
    option http-server-close
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000
frontend http-in
        bind *:80
        mode http
        # Define hosts
        acl host_warden hdr(host) -i warden.ghostlink.net
        acl host_firefly hdr(host) -i firefly.ghostlink.net
        acl host_gitlab hdr(host) -i git.ghostlink.net

        ## figure out which one to use
        use_backend warden-http if host_warden
        use_backend firefly-http if host_firefly
        use_backend gitlab-http if host_gitlab
frontend https-in
        bind *:443
        mode tcp
        option tcplog
        tcp-request inspect-delay 2s
        # Define hosts
        acl host_warden req.ssl_sni -i warden.ghostlink.net
        acl host_firefly req.ssl_sni -i firefly.ghostlink.net
        acl host_gitlab req.ssl_sni -i git.ghostlink.net

        ## figure out which one to use
        use_backend warden-https if host_warden
        use_backend firefly-https if host_firefly
        use_backend gitlab-https if host_gitlab

        default_backend landing-https

backend warden-http
        server warden warden.ghostlink.net:80  
backend firefly-http
        server firefly firefly.ghostlink.net:80  
backend gitlab-http
        server git git.ghostlink.net:80  

backend warden-https
        mode tcp
        option ssl-hello-chk
        server warden warden.ghostlink.net:443  check sni req.ssl_sni
backend firefly-https
        mode tcp
        option ssl-hello-chk
        server firefly firefly.ghostlink.net:443  check sni req.ssl_sni
backend gitlab-https
        mode tcp
        server git git.ghostlink.net:443  check sni req.ssl_sni
backend landing-https
        mode tcp
        server landing landing.ghostlink.net:443  check sni req.ssl_sni
